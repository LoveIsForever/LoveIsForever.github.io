<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>第一章 汇编语言基本概念</title>
    <url>/2023/03/07/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<pre><code> 基本概念：
·控制计算机工作的机器指令由二进制数构成，机器指令的集合是机器语言。
·人类难以写出复杂的机器码，因此使用指令助记符来编写程序，这种程序叫做汇编语言。
</code></pre>
<p>第一节 进位计数制与不同基数的数之间的转换</p>
<pre><code>*十进制数——&gt;N进制数
        整数部分：除N取余，商零为止，结果先低后高。
        小数部分：乘N取整，到零为止，结果先高后低。
*十六进制和二进制互相转换：四位并作一位
</code></pre>
<p>第二节 二进制数与十六进制数运算</p>
<pre><code>    1.算数运算
    与十进制数类似
    2.逻辑运算
    按位进行，例：与，或，非，异或...
</code></pre>
<p>第三节 计算机中数和字符的表示</p>
<pre><code>    1.无符号数（没有正负）
    2.带符号数
      用符号位表示：0-正数、1-负数
        1）求补运算
           -正数的补码是他本身
           -负数的补码是对应正数按位取反后加1
        2）补码
           -计算机中用补码表示带符号数
        3）补码的真值计算
             -真值：补码表示的数值大小
             -由最高位判断正负，若为正，真值为数值位；
             -若为负，对该数求补后再求数值大小
        4）用补码表示带符号数的意义
             -将减法用加法实现（正数加负数），省去减法器
             -无符号数和带符号数的加减法可用同一电路完成
    3.8位、16位数的表示范围
                无符号数     带符号数
      8位         0~255      -128~127
      16位       0~65535   -32768~32767
    规定：	
            8位 1000 0000 即 80H，表示-128D
          16位 1000 0000 0000 0000 即 8000H，表示-32768D
      
    4.进位、借位、溢出的判断
    1）进位：在加法过程中，最高有效位向高位产生进位
    2）借位：在减法过程中，最高有效位向高位产生借位
    3）溢出：指加减运算结果超出带符号数表示的范围
       溢出判断方法：
       -符号相同的两数相加，所得结果符号与之相反，结果溢出
       -符号相反的两数相减，所得结果符号与减数相同，结果溢出
       -其它情况不会产生溢出
     
</code></pre>
<p> 四、二进制编码</p>
<pre><code>     -计算机处理的信息：数值、字符
     -字符在计算机中用二进制表示
ASCII（美国标准信息交换码）
        

    
</code></pre>
]]></content>
      <categories>
        <category>计算机基础课程</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 操作系统的概述</title>
    <url>/2023/03/06/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>2.1 操作系统的目标和功能<br>    功能：操作系统是控制应用程序执行的程序，充当程序和计算机硬件之间的借口。<br>    目标：方便、有效、可扩展能力<br>    操作系统提供的服务：程序开发、程序运行、I&#x2F;O设备访问、文件访问控制、系统访问、错误检测和响应</p>
<pre><code>    2.1.1 操作系统：作为用户/计算机接口
        典型计算机系统中三种重要的接口
    ·指令系统体系结构（ISA）
    -定义了计算机遵循的机器语言指令系统，是硬件与软件的分界线
    ·应用程序二进制接口（ABI）
    -定义了程序间二进制可移植性的标准
    ·应用程序编程接口（API）
    -允许应用程序访问系统的硬件资源和服务

 2.1.2 操作系统：作为资源管理器
</code></pre>
<p><img data-src="/images/pasted-3.png" alt="upload successful"></p>
<pre><code> 2.1.3 操作系统的易扩展性
 ·一个重要的操作系统应该能够不断发展，原因：
      -硬件升级和新型硬件的出现
      -新的服务
      -纠正错误
  ·对操作系统设计的要求：
      -采用模块化的结构
      -清楚地定义模块间的接口
      -备有说明文档
</code></pre>
<p>   2.2操作系统的演化</p>
<pre><code>2.2.1 串行处理--&gt;简单批处理--&gt;多道批处理
  *多道程序设计
   -内存同时保存多道程序，当程序进行到I/O操作时切换程序运行
   -提高cpu利用率
   -需要中断技术、内存管理、进程调度等方面的支持
*比较单道运行时间关系图、多道运行时间关系图（抢占和不抢占两类）的差别
2.2.2 分时系统
    利用时间片技术和中断级数允许多个用户同时使用一个计算机系统进行交互式计算
    ·分时和多道程序设计引发的新问题：
        -作业的相互干扰
        -文件系统的保护
        -处理资源的竞争
</code></pre>
<p>2.3 操作系统四个重要的的理论进展</p>
<pre><code>    -进程
    -内存管理
    -信息保护和安全
    -调度和资源管理
2.3.1 进程
· 定义
    -一个正在执行的程序
    - 计算机中正在运行的程序的一个实例
    -可以分配给CPU执行的一个实体
    -由单一顺序的执行线索、一个当前状态和一组相关的系统资源所描述的 活动单元
· 问题
    同步、互斥、不确定的程序操作，死锁
· 组成
    -一段可执行的程序
    -程序所需要的相关数据
    -程序执行的上下文
· 进程和程序的区别
    -进程是动态的，程序是静态的
2.3.2 内存管理
·管理任务
    -进程隔离
    -自动分配和管理
    -支持模块化程序设计
    -保护和访问控制
    -长期存储
·文件系统
    -长期存储
·虚存机制
    -允许程序从逻辑的角度访问存储器，不用考虑物理内存上可用的空间数量。
2.3.3 信息保护和安全
· 与操作系统相关的安全和保护问题
    -可用性：保护系统不被打断
    -保密性：保证用户不能读到未经授权访问的数据
    -数据完整性：保护数据不被未授权修改
    -认证性：涉及用户身份的正确认证和消息或数据的合法性
2.3.4 调度和资源管理
· 资源分配和调度需考虑的因素：
    -公平性
    -有差别的相应性
    -有效性
</code></pre>
<p>2.4 现代操作系统的特征</p>
<pre><code>·微内核体系结构
·多线程
·对称多处理
·分布式操作系统
·面向对象设计
</code></pre>
<p>2.5 容错性</p>
<pre><code>·系统或不见在发生错误时，能够继续正常运行的能力
    -旨在提高系统的可靠性
    -通常会涉及一定程度的冗余
    *空间冗余：多个组件同时执行相同的功能或者备份
    *时间冗余：检测到错误时重复某一功能或操作
    *信息冗余：通过复制或编码数据的方式来检测和修复数据
       
2.5.1 基本概念
· 与容错性相关的系统运行质量的基本度量指标
    -可靠性：一段时间内系统正常运行的概率
    -平均修复时间：修复或替换错误部分所花费的平均时间
    -可用性：系统能够有效服务用户请求的时间段
2.5.2 错误
· 一个不正确的硬件或软件状态，分为：
    -永久性错误：硬件磁头损坏，通信部件损坏等
    -临时性错误：错误不存在与所有操作条件下
2.5.3 操作系统机制
· 操作系统中用来提高容错性的相关技术：
    -进程隔离
    -并发控制
    -虚拟机
    -监测点和回滚机制
</code></pre>
<p> 2.6 多处理器和多核操作系统涉及考虑因素</p>
<pre><code>· 对称多处理器计算机的操作系统设计考虑因素
    -并发进程或线程
    -调度
    -同步
    -内存管理
    -可靠性和容错性
· 多核计算机的操作系统设计考虑因素
    -SMP系统上的所有设计问题
    -潜在的并行规模问题：应用层并行、虚拟机方式
    
    
</code></pre>
]]></content>
      <categories>
        <category>计算机基础课程</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 进程描述和控制</title>
    <url>/2023/03/09/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8F%8F%E8%BF%B0%E5%92%8C%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>3.1 什么是进程</p>
<pre><code>· 进程定义
    -一个正在执行中的程序
    -一个正在计算机上执行的程序实例
    -一个能分配给处理器执行的实体
    -一个具有以下特征的活动单元：一组指令序列的执行、一个当前状态和相关的系统资源集。
· 构成进程的基本元素
    -程序代码
    -数据集
· 进程控制块，进程控制块图示：
</code></pre>
<p><img data-src="/images/pasted-8.png" alt="upload successful"></p>
<p>3.2 进程状态</p>
<pre><code>3.2.1 两状态进程模型（进程模型类似于进程的生命周期）
</code></pre>
<p><img data-src="/images/pasted-5.png" alt="upload successful"></p>
<p><img data-src="/images/pasted-6.png" alt="upload successful"></p>
<pre><code>3.2.2 进程的创建和终止
· 进程的创建
    -新批处理作业提交给操作系统
    -交互系统终端用户登录到系统
    -操作系统创建
    -进程派生（父进程、子进程）
· 进程的终止
    -正常完成
    -各种错误和故障
    -操作员或操作系统干涉
    -父进程终止
    -父进程请求终止子进程
3.2.3 五状态进程模型
</code></pre>
<p><img data-src="/images/pasted-7.png" alt="upload successful"> </p>
<pre><code>· 阻塞队列
进程通过系统调用的方式申请某种系统资源或请求等待某一事件的发生后，进程从运行态转换到到阻塞态
· 被挂起的进程
</code></pre>
<p><img data-src="/images/pasted-9.png" alt="upload successful"></p>
<pre><code>· 挂起进程的特点
    -进程不能立即执行
    -若进程正在等待一个事件，阻塞条件也不等同于挂起条件，即当等待结束时，被挂起的进程也不能立刻运行
    -使进程挂起的对象为：自身，父进程，操作系统
    -挂起的进程当且仅当受到将其挂起的对象的命令时，才会进行状态转移（解铃还需系铃人）
 
</code></pre>
<p>3.3 进程描述</p>
<pre><code>3.3.1 操作系统的控制结构
· 操作系统维护的信息分为四类：
    -内存表：跟踪内存和外存
    -I/O表：管理计算机系统中的I/O设备和通道
    -文件表：提供关于文件的相关信息
    -进程表：管理进程
· 内存、I/O和文件代表进程被管理
3.3.2 进程控制结构
·进程映像
</code></pre>
<p><img data-src="/images/pasted-10.png" alt="upload successful"></p>
<pre><code>· 进程控制块
    -进程标识信息：进程ID、父进程ID、用户ID
    -进程状态信息：寄存器、栈指针
    -进程控制信息：调度和状态信息、数据结构、进程通信、进程特权、存储管理、资源的所有权和使用情况
    
</code></pre>
<p>3.4 进程控制</p>
<pre><code>3.4.1 执行模式
· 用户态
· 系统态
    -控制态、内核态
    -操作系统内核在该模式下运行，特权态
· 处理器获知和改变所处模式的方法
    -程序状态字中有表示执行模式的位
    -该位应某些事件要求而改变
3.4.2 进程创建
    -分配进程标识符
    -分配空间
    -初始化进程控制块
    -设置正确的连接
    -创建或扩充其它数据结构
3.4.3 进程切换
·中断处于运行态的进程，让操作系统指定的新进程运行。被中断的进程的上下文环境需要保存

1.切换时机
    ·中断：时钟中断、I/O中断、内存失效
    ·陷阱
    ·系统调用
2.模式切换
· 当中断发生时，处理器做出如下反应：
    -把程序计数器置成中断处理程序的开始地址
    -暂时中断正在执行的用户进程，把进程从用户态切换到内核态，转去执行操作系统例行程序以获得服务
· 保存的进程上下文包括：
    -所有中断处理可能改变的信息
    -恢复被中断程序时可能需要的信息
· 模式切换可以不改变正处于运行态的进程状态，保存和恢复上下文环境开销小
· 进程切换涉及进程状态的变化，开销较大	
3.进程状态的变化
·完整的进程切换步骤：
    -保存处理器上下文环境；
    -更新当前处于运行态进程的进程控制块；
    -将进程的进程控制块移到相应的队列；
    -选择另一个进程运行；
    -更新所选择进程的进程控制块；
    -更新内存管理的数据结构；
    -恢复处理器在被选择的进程最近一次切换出运行状态时的上下文环境。
    
</code></pre>
<p>3.5 操作系统的执行</p>
<pre><code>· 操作系统也是由处理器执行的一个程序，模式分以下三类：
3.5.1 无进程的内核
    ·进程的概念仅适用于用户程序，操作系统代码作为在特权模式下工作的独立实体被执行
3.5.2 在用户进程中执行
    · 操作系统是用户调用的一组例程，在用户进程环境中执行，用于实现各种功能
3.5.3 基于进程的操作系统
    · 把操作系统作为一组系统进程来实现，主要的内核函数被组织成独立的进程
    
    
    
</code></pre>
]]></content>
      <categories>
        <category>计算机基础课程</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
