{"meta":{"title":"XYuan‘s blog","subtitle":"","description":"这个人很懒，什么都没留下","author":"XYuan","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-03-10T09:19:18.000Z","updated":"2023-03-10T09:20:35.238Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-03-09T03:47:48.000Z","updated":"2023-03-10T09:22:00.022Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2023-03-10T09:25:28.000Z","updated":"2023-03-10T09:32:01.959Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"这个人还是很懒，什么都没留下。除了微信："}],"posts":[{"title":"图嵌入：SDNE算法","slug":"图嵌入：SDNE模型","date":"2023-03-11T14:07:00.000Z","updated":"2023-03-11T14:20:58.696Z","comments":true,"path":"2023/03/11/图嵌入：SDNE模型/","link":"","permalink":"http://example.com/2023/03/11/%E5%9B%BE%E5%B5%8C%E5%85%A5%EF%BC%9ASDNE%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"Graph embedding SDNE（Structural Deep Network Embedding ）可以看作是Line算法的扩展。SDNE使用一个自动编码器结构来同时优化1阶和2阶相似度(LINE是分别优化的)，学习得到的向量表示能够保留局部和全局结构，并且对稀疏网络具有鲁棒性。 SDNE算法原理： 相似度定义：","categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"SDNE算法","slug":"图神经网络/图嵌入经典算法/SDNE算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/SDNE%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"}],"author":"XYuan"},{"title":"图嵌入：Struc2Vec算法","slug":"图嵌入：Struc2Vec算法","date":"2023-03-11T11:39:53.000Z","updated":"2023-03-11T14:20:51.183Z","comments":true,"path":"2023/03/11/图嵌入：Struc2Vec算法/","link":"","permalink":"http://example.com/2023/03/11/%E5%9B%BE%E5%B5%8C%E5%85%A5%EF%BC%9AStruc2Vec%E7%AE%97%E6%B3%95/","excerpt":"Graph embedding DeepWalk,LINE,Node2Vec,SDNE几个graph embedding方法，都基于近邻相似的假设，然而实际上，不相邻（离得远）的两个节点也可能有很高的相似性。Stuc2Vec就是解决这种问题的模型。 stuc2vec算法原理： · 相似度定义：struc2vec采用空间结构相似性来定义相似度。直观来看，具有相同度数的节点是相似的，若各自的邻接节点仍有相同度数，那么它们的相似性就更高。 · 节点对距离的定义： -与节点u距离为k的节点集合 -一个节点集合的有序度序列（度序列有序排序） -通过比较两节点之间距离为k的节点集合的度序列来层次化衡量两节点间的结构相似度。 -定义两节点之间的k阶结构距离为k-1阶的结构距离加上两节点k阶度序列的距离。 -由于两节点的k阶度序列长度不同，且可能有重复元素，因此采用DTW来衡量度序列的距离 -DTW算法：动态时间规整（Dynamic Time Warping）相当于求序列之间距离最短的节点对集合的距离之和。序列元素之间的距离函数可以自定义。 · 构建层次带权图：对于不同的k，我们通过上一节得到的节点对距离来构建一个层次化的带权图（用于之后的随机游走）。定义某一层中节点的边权，通过有向边将属于不同层次的同一节点连接起来，定义每一节点和上层节点、下层节点的边权值。层次带权图结构如下：","text":"Graph embedding DeepWalk,LINE,Node2Vec,SDNE几个graph embedding方法，都基于近邻相似的假设，然而实际上，不相邻（离得远）的两个节点也可能有很高的相似性。Stuc2Vec就是解决这种问题的模型。 stuc2vec算法原理： · 相似度定义：struc2vec采用空间结构相似性来定义相似度。直观来看，具有相同度数的节点是相似的，若各自的邻接节点仍有相同度数，那么它们的相似性就更高。 · 节点对距离的定义： -与节点u距离为k的节点集合 -一个节点集合的有序度序列（度序列有序排序） -通过比较两节点之间距离为k的节点集合的度序列来层次化衡量两节点间的结构相似度。 -定义两节点之间的k阶结构距离为k-1阶的结构距离加上两节点k阶度序列的距离。 -由于两节点的k阶度序列长度不同，且可能有重复元素，因此采用DTW来衡量度序列的距离 -DTW算法：动态时间规整（Dynamic Time Warping）相当于求序列之间距离最短的节点对集合的距离之和。序列元素之间的距离函数可以自定义。 · 构建层次带权图：对于不同的k，我们通过上一节得到的节点对距离来构建一个层次化的带权图（用于之后的随机游走）。定义某一层中节点的边权，通过有向边将属于不同层次的同一节点连接起来，定义每一节点和上层节点、下层节点的边权值。层次带权图结构如下： · 随机游走策略： -在构建出的层次带权图中进行随机游走 -首先在每一步之前，struc2vec的随机游走策略会首先决定它是否会改变图层或在当前图层上游走(概率q&gt;0，是一个用户设定的超参数) -定义相应的游走概率，使得每次采样的节点更倾向于选择与当前节点结构相似的节点。 · 三个优化技巧 https://github.com/shenweichen/GraphEmbedding","categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"Struc2Vec算法","slug":"图神经网络/图嵌入经典算法/Struc2Vec算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/Struc2Vec%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"}],"author":"XYuan"},{"title":"图嵌入：Node2Vec算法","slug":"图嵌入：Node2vec算法","date":"2023-03-11T10:59:40.000Z","updated":"2023-03-11T14:20:00.557Z","comments":true,"path":"2023/03/11/图嵌入：Node2vec算法/","link":"","permalink":"http://example.com/2023/03/11/%E5%9B%BE%E5%B5%8C%E5%85%A5%EF%BC%9ANode2vec%E7%AE%97%E6%B3%95/","excerpt":"","text":"Graph embedding node2vec是deepwalk的扩展，是一种有策略的随机游走，结合了BFS和DFS。 node2vec算法原理： 优化目标：在给定源节点条件下，其近邻节点出现的概率最大 为使上述优化目标可解，文章有两个基本假设： 1.条件独立性假设：假设给定源节点的情况下，其近邻节点出现的概率与近邻集合中的其它节点无关 2.特征空间对立性假设：假设一个节点作为源节点和作为邻居节点的嵌入向量相同 随机游走采样策略：d表示下一次游走到的节点与上一次游走来的节点的距离。 当p较大时，当前随机游走趋向于在初始节点附近徘徊，是广度优先（BFS）； 当q较大时，当前随机游走趋向于远离初始节点，是深度优先（DFS）。","categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"Node2Vec算法","slug":"图神经网络/图嵌入经典算法/Node2Vec算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/Node2Vec%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"}],"author":"XYuan"},{"title":"图嵌入：LINE算法","slug":"图嵌入：LINE算法","date":"2023-03-11T04:59:00.000Z","updated":"2023-03-11T05:22:59.767Z","comments":true,"path":"2023/03/11/图嵌入：LINE算法/","link":"","permalink":"http://example.com/2023/03/11/%E5%9B%BE%E5%B5%8C%E5%85%A5%EF%BC%9ALINE%E7%AE%97%E6%B3%95/","excerpt":"","text":"Graph embedding LINE算法原理： 首先LINE算法对相似度的定义与其它算法不同： ·一阶相似度：用于描述成对节点之间的相似度，若两节点之间有直连边，且边权较大，则这两点之间的相似度高；若两点间无直连边，则相似度为0。 有时候两节点虽然没有直连边，但是它们有很多相同的邻居，这也表明两节点是相似的，所以仅有一阶相似度是不够的。 ·二阶相似度：把某节点对其它节点的一阶相似度表示为向量，二阶相似度可以表示为两个节点的一阶相似度向量之间的相似度。若两节点不存在相同的邻居节点，则它们的二阶相似度为0. 因此，模型的优化目标就是优化相似度条件分布和经验分布之间的KL散度。 具体算法： https://github.com/shenweichen/GraphEmbedding","categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"LINE算法","slug":"图神经网络/图嵌入经典算法/LINE算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/LINE%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"}],"author":"XYuan"},{"title":"图嵌入：DeepWalk算法","slug":"图嵌入：DeepWalk算法","date":"2023-03-11T04:43:00.000Z","updated":"2023-03-11T04:58:37.749Z","comments":true,"path":"2023/03/11/图嵌入：DeepWalk算法/","link":"","permalink":"http://example.com/2023/03/11/%E5%9B%BE%E5%B5%8C%E5%85%A5%EF%BC%9ADeepWalk%E7%AE%97%E6%B3%95/","excerpt":"","text":"Graph embedding DeepWalk算法原理： -使用随机游走采样节点序列，把每个节点看作单词，应用word2vec算法 具体分为以下两个步骤： ①构建同构网络，从网络中的每个节点开始分别进行Random Walk采样，得到局部相关联的训练数据； ②对采样数据进行SkipGram训练，将离散的网络节点表示成向量化，最大化节点共现，使用Hierarchical Softmax来做超大规模分类的分类器 代码实现： https://github.com/shenweichen/GraphEmbedding","categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"DeepWalk算法","slug":"图神经网络/图嵌入经典算法/DeepWalk算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/DeepWalk%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"}],"author":"XYuan"},{"title":"第三章 进程描述和控制","slug":"第三章-进程描述和控制","date":"2023-03-09T03:49:00.000Z","updated":"2023-03-10T05:29:58.308Z","comments":true,"path":"2023/03/09/第三章-进程描述和控制/","link":"","permalink":"http://example.com/2023/03/09/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E6%8F%8F%E8%BF%B0%E5%92%8C%E6%8E%A7%E5%88%B6/","excerpt":"3.1 什么是进程 · 进程定义 -一个正在执行中的程序 -一个正在计算机上执行的程序实例 -一个能分配给处理器执行的实体 -一个具有以下特征的活动单元：一组指令序列的执行、一个当前状态和相关的系统资源集。 · 构成进程的基本元素 -程序代码 -数据集 · 进程控制块，进程控制块图示： 3.2 进程状态 3.2.1 两状态进程模型（进程模型类似于进程的生命周期）","text":"3.1 什么是进程 · 进程定义 -一个正在执行中的程序 -一个正在计算机上执行的程序实例 -一个能分配给处理器执行的实体 -一个具有以下特征的活动单元：一组指令序列的执行、一个当前状态和相关的系统资源集。 · 构成进程的基本元素 -程序代码 -数据集 · 进程控制块，进程控制块图示： 3.2 进程状态 3.2.1 两状态进程模型（进程模型类似于进程的生命周期） 3.2.2 进程的创建和终止 · 进程的创建 -新批处理作业提交给操作系统 -交互系统终端用户登录到系统 -操作系统创建 -进程派生（父进程、子进程） · 进程的终止 -正常完成 -各种错误和故障 -操作员或操作系统干涉 -父进程终止 -父进程请求终止子进程 3.2.3 五状态进程模型 · 阻塞队列 进程通过系统调用的方式申请某种系统资源或请求等待某一事件的发生后，进程从运行态转换到到阻塞态 · 被挂起的进程 · 挂起进程的特点 -进程不能立即执行 -若进程正在等待一个事件，阻塞条件也不等同于挂起条件，即当等待结束时，被挂起的进程也不能立刻运行 -使进程挂起的对象为：自身，父进程，操作系统 -挂起的进程当且仅当受到将其挂起的对象的命令时，才会进行状态转移（解铃还需系铃人） 3.3 进程描述 3.3.1 操作系统的控制结构 · 操作系统维护的信息分为四类： -内存表：跟踪内存和外存 -I/O表：管理计算机系统中的I/O设备和通道 -文件表：提供关于文件的相关信息 -进程表：管理进程 · 内存、I/O和文件代表进程被管理 3.3.2 进程控制结构 ·进程映像 · 进程控制块 -进程标识信息：进程ID、父进程ID、用户ID -进程状态信息：寄存器、栈指针 -进程控制信息：调度和状态信息、数据结构、进程通信、进程特权、存储管理、资源的所有权和使用情况 3.4 进程控制 3.4.1 执行模式 · 用户态 · 系统态 -控制态、内核态 -操作系统内核在该模式下运行，特权态 · 处理器获知和改变所处模式的方法 -程序状态字中有表示执行模式的位 -该位应某些事件要求而改变 3.4.2 进程创建 -分配进程标识符 -分配空间 -初始化进程控制块 -设置正确的连接 -创建或扩充其它数据结构 3.4.3 进程切换 ·中断处于运行态的进程，让操作系统指定的新进程运行。被中断的进程的上下文环境需要保存 1.切换时机 ·中断：时钟中断、I/O中断、内存失效 ·陷阱 ·系统调用 2.模式切换 · 当中断发生时，处理器做出如下反应： -把程序计数器置成中断处理程序的开始地址 -暂时中断正在执行的用户进程，把进程从用户态切换到内核态，转去执行操作系统例行程序以获得服务 · 保存的进程上下文包括： -所有中断处理可能改变的信息 -恢复被中断程序时可能需要的信息 · 模式切换可以不改变正处于运行态的进程状态，保存和恢复上下文环境开销小 · 进程切换涉及进程状态的变化，开销较大 3.进程状态的变化 ·完整的进程切换步骤： -保存处理器上下文环境； -更新当前处于运行态进程的进程控制块； -将进程的进程控制块移到相应的队列； -选择另一个进程运行； -更新所选择进程的进程控制块； -更新内存管理的数据结构； -恢复处理器在被选择的进程最近一次切换出运行状态时的上下文环境。 3.5 操作系统的执行 · 操作系统也是由处理器执行的一个程序，模式分以下三类： 3.5.1 无进程的内核 ·进程的概念仅适用于用户程序，操作系统代码作为在特权模式下工作的独立实体被执行 3.5.2 在用户进程中执行 · 操作系统是用户调用的一组例程，在用户进程环境中执行，用于实现各种功能 3.5.3 基于进程的操作系统 · 把操作系统作为一组系统进程来实现，主要的内核函数被组织成独立的进程","categories":[{"name":"计算机基础课程","slug":"计算机基础课程","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"},{"name":"操作系统","slug":"计算机基础课程/操作系统","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"author":"XYuan"},{"title":"第一章 汇编语言基本概念","slug":"第一章-汇编语言基本概念","date":"2023-03-07T07:03:00.000Z","updated":"2023-03-07T07:58:55.492Z","comments":true,"path":"2023/03/07/第一章-汇编语言基本概念/","link":"","permalink":"http://example.com/2023/03/07/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"基本概念： ·控制计算机工作的机器指令由二进制数构成，机器指令的集合是机器语言。 ·人类难以写出复杂的机器码，因此使用指令助记符来编写程序，这种程序叫做汇编语言。 第一节 进位计数制与不同基数的数之间的转换 *十进制数——&gt;N进制数 整数部分：除N取余，商零为止，结果先低后高。 小数部分：乘N取整，到零为止，结果先高后低。 *十六进制和二进制互相转换：四位并作一位 第二节 二进制数与十六进制数运算 1.算数运算 与十进制数类似 2.逻辑运算 按位进行，例：与，或，非，异或...","text":"基本概念： ·控制计算机工作的机器指令由二进制数构成，机器指令的集合是机器语言。 ·人类难以写出复杂的机器码，因此使用指令助记符来编写程序，这种程序叫做汇编语言。 第一节 进位计数制与不同基数的数之间的转换 *十进制数——&gt;N进制数 整数部分：除N取余，商零为止，结果先低后高。 小数部分：乘N取整，到零为止，结果先高后低。 *十六进制和二进制互相转换：四位并作一位 第二节 二进制数与十六进制数运算 1.算数运算 与十进制数类似 2.逻辑运算 按位进行，例：与，或，非，异或... 第三节 计算机中数和字符的表示 1.无符号数（没有正负） 2.带符号数 用符号位表示：0-正数、1-负数 1）求补运算 -正数的补码是他本身 -负数的补码是对应正数按位取反后加1 2）补码 -计算机中用补码表示带符号数 3）补码的真值计算 -真值：补码表示的数值大小 -由最高位判断正负，若为正，真值为数值位； -若为负，对该数求补后再求数值大小 4）用补码表示带符号数的意义 -将减法用加法实现（正数加负数），省去减法器 -无符号数和带符号数的加减法可用同一电路完成 3.8位、16位数的表示范围 无符号数 带符号数 8位 0~255 -128~127 16位 0~65535 -32768~32767 规定： 8位 1000 0000 即 80H，表示-128D 16位 1000 0000 0000 0000 即 8000H，表示-32768D 4.进位、借位、溢出的判断 1）进位：在加法过程中，最高有效位向高位产生进位 2）借位：在减法过程中，最高有效位向高位产生借位 3）溢出：指加减运算结果超出带符号数表示的范围 溢出判断方法： -符号相同的两数相加，所得结果符号与之相反，结果溢出 -符号相反的两数相减，所得结果符号与减数相同，结果溢出 -其它情况不会产生溢出 四、二进制编码 -计算机处理的信息：数值、字符 -字符在计算机中用二进制表示 ASCII（美国标准信息交换码）","categories":[{"name":"计算机基础课程","slug":"计算机基础课程","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"},{"name":"汇编语言","slug":"计算机基础课程/汇编语言","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"author":"XYuan"},{"title":"第二章 操作系统的概述","slug":"第二章-操作系统的概述","date":"2023-03-06T08:54:00.000Z","updated":"2023-03-09T01:00:43.290Z","comments":true,"path":"2023/03/06/第二章-操作系统的概述/","link":"","permalink":"http://example.com/2023/03/06/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E8%BF%B0/","excerpt":"2.1 操作系统的目标和功能 功能：操作系统是控制应用程序执行的程序，充当程序和计算机硬件之间的借口。 目标：方便、有效、可扩展能力 操作系统提供的服务：程序开发、程序运行、I&#x2F;O设备访问、文件访问控制、系统访问、错误检测和响应 2.1.1 操作系统：作为用户/计算机接口 典型计算机系统中三种重要的接口 ·指令系统体系结构（ISA） -定义了计算机遵循的机器语言指令系统，是硬件与软件的分界线 ·应用程序二进制接口（ABI） -定义了程序间二进制可移植性的标准 ·应用程序编程接口（API） -允许应用程序访问系统的硬件资源和服务 2.1.2 操作系统：作为资源管理器 2.1.3 操作系统的易扩展性 ·一个重要的操作系统应该能够不断发展，原因： -硬件升级和新型硬件的出现 -新的服务 -纠正错误 ·对操作系统设计的要求： -采用模块化的结构 -清楚地定义模块间的接口 -备有说明文档 2.2操作系统的演化","text":"2.1 操作系统的目标和功能 功能：操作系统是控制应用程序执行的程序，充当程序和计算机硬件之间的借口。 目标：方便、有效、可扩展能力 操作系统提供的服务：程序开发、程序运行、I&#x2F;O设备访问、文件访问控制、系统访问、错误检测和响应 2.1.1 操作系统：作为用户/计算机接口 典型计算机系统中三种重要的接口 ·指令系统体系结构（ISA） -定义了计算机遵循的机器语言指令系统，是硬件与软件的分界线 ·应用程序二进制接口（ABI） -定义了程序间二进制可移植性的标准 ·应用程序编程接口（API） -允许应用程序访问系统的硬件资源和服务 2.1.2 操作系统：作为资源管理器 2.1.3 操作系统的易扩展性 ·一个重要的操作系统应该能够不断发展，原因： -硬件升级和新型硬件的出现 -新的服务 -纠正错误 ·对操作系统设计的要求： -采用模块化的结构 -清楚地定义模块间的接口 -备有说明文档 2.2操作系统的演化 2.2.1 串行处理--&gt;简单批处理--&gt;多道批处理 *多道程序设计 -内存同时保存多道程序，当程序进行到I/O操作时切换程序运行 -提高cpu利用率 -需要中断技术、内存管理、进程调度等方面的支持 *比较单道运行时间关系图、多道运行时间关系图（抢占和不抢占两类）的差别 2.2.2 分时系统 利用时间片技术和中断级数允许多个用户同时使用一个计算机系统进行交互式计算 ·分时和多道程序设计引发的新问题： -作业的相互干扰 -文件系统的保护 -处理资源的竞争 2.3 操作系统四个重要的的理论进展 -进程 -内存管理 -信息保护和安全 -调度和资源管理 2.3.1 进程 · 定义 -一个正在执行的程序 - 计算机中正在运行的程序的一个实例 -可以分配给CPU执行的一个实体 -由单一顺序的执行线索、一个当前状态和一组相关的系统资源所描述的 活动单元 · 问题 同步、互斥、不确定的程序操作，死锁 · 组成 -一段可执行的程序 -程序所需要的相关数据 -程序执行的上下文 · 进程和程序的区别 -进程是动态的，程序是静态的 2.3.2 内存管理 ·管理任务 -进程隔离 -自动分配和管理 -支持模块化程序设计 -保护和访问控制 -长期存储 ·文件系统 -长期存储 ·虚存机制 -允许程序从逻辑的角度访问存储器，不用考虑物理内存上可用的空间数量。 2.3.3 信息保护和安全 · 与操作系统相关的安全和保护问题 -可用性：保护系统不被打断 -保密性：保证用户不能读到未经授权访问的数据 -数据完整性：保护数据不被未授权修改 -认证性：涉及用户身份的正确认证和消息或数据的合法性 2.3.4 调度和资源管理 · 资源分配和调度需考虑的因素： -公平性 -有差别的相应性 -有效性 2.4 现代操作系统的特征 ·微内核体系结构 ·多线程 ·对称多处理 ·分布式操作系统 ·面向对象设计 2.5 容错性 ·系统或不见在发生错误时，能够继续正常运行的能力 -旨在提高系统的可靠性 -通常会涉及一定程度的冗余 *空间冗余：多个组件同时执行相同的功能或者备份 *时间冗余：检测到错误时重复某一功能或操作 *信息冗余：通过复制或编码数据的方式来检测和修复数据 2.5.1 基本概念 · 与容错性相关的系统运行质量的基本度量指标 -可靠性：一段时间内系统正常运行的概率 -平均修复时间：修复或替换错误部分所花费的平均时间 -可用性：系统能够有效服务用户请求的时间段 2.5.2 错误 · 一个不正确的硬件或软件状态，分为： -永久性错误：硬件磁头损坏，通信部件损坏等 -临时性错误：错误不存在与所有操作条件下 2.5.3 操作系统机制 · 操作系统中用来提高容错性的相关技术： -进程隔离 -并发控制 -虚拟机 -监测点和回滚机制 2.6 多处理器和多核操作系统涉及考虑因素 · 对称多处理器计算机的操作系统设计考虑因素 -并发进程或线程 -调度 -同步 -内存管理 -可靠性和容错性 · 多核计算机的操作系统设计考虑因素 -SMP系统上的所有设计问题 -潜在的并行规模问题：应用层并行、虚拟机方式","categories":[{"name":"计算机基础课程","slug":"计算机基础课程","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"},{"name":"操作系统","slug":"计算机基础课程/操作系统","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-03-06T03:06:35.771Z","updated":"2023-03-06T03:06:35.771Z","comments":true,"path":"2023/03/06/hello-world/","link":"","permalink":"http://example.com/2023/03/06/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图嵌入经典算法","slug":"图神经网络/图嵌入经典算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"},{"name":"SDNE算法","slug":"图神经网络/图嵌入经典算法/SDNE算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/SDNE%E7%AE%97%E6%B3%95/"},{"name":"Struc2Vec算法","slug":"图神经网络/图嵌入经典算法/Struc2Vec算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/Struc2Vec%E7%AE%97%E6%B3%95/"},{"name":"Node2Vec算法","slug":"图神经网络/图嵌入经典算法/Node2Vec算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/Node2Vec%E7%AE%97%E6%B3%95/"},{"name":"LINE算法","slug":"图神经网络/图嵌入经典算法/LINE算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/LINE%E7%AE%97%E6%B3%95/"},{"name":"DeepWalk算法","slug":"图神经网络/图嵌入经典算法/DeepWalk算法","permalink":"http://example.com/categories/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E5%B5%8C%E5%85%A5%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/DeepWalk%E7%AE%97%E6%B3%95/"},{"name":"计算机基础课程","slug":"计算机基础课程","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/"},{"name":"操作系统","slug":"计算机基础课程/操作系统","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"汇编语言","slug":"计算机基础课程/汇编语言","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"图神经网络","slug":"图神经网络","permalink":"http://example.com/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"图表示学习","slug":"图表示学习","permalink":"http://example.com/tags/%E5%9B%BE%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0/"},{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}]}